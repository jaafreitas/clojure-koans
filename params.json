{"name":"Clojure-koans","tagline":"A set of exercises for learning Clojure","body":"# Clojure Koans\r\n\r\nThe Clojure Koans are a fun and easy way to get started with Clojure - no\r\nexperience assumed or required.  Just follow the instructions below to start\r\nmaking tests pass!\r\n\r\n\r\n### Getting Started\r\n\r\nThe easiest and fastest way to get the koans up and running is to [download the\r\nlatest zip file from Github](https://github.com/functional-koans/clojure-koans/downloads).\r\nThis way, you'll have all the dependencies you need, including Clojure itself\r\nand JLine, and you can skip the rest of this section (skip to \"Running the\r\nKoans\").\r\n\r\nIf you're starting from a cloned or forked repo, that's cool too. This way\r\nyou'll be able to track your progress in Git, and see how your answers compare\r\nto others, by checking out the project's Network tab. You might want to create\r\nyour own branch - that way if you pull back the latest koans from master, it'll\r\nbe a bit easier to manage the inevitable conflicts if we make changes to\r\nexercises you've already completed.\r\n\r\nThe only things you'll need to run the Clojure Koans are:\r\n\r\n- JRE 1.5 or higher\r\n- [clojure-1.5.1.jar](http://repo1.maven.org/maven2/org/clojure/clojure/1.5.1/clojure-1.5.1.zip)\r\n\r\nYou can use [Leiningen](http://github.com/technomancy/leiningen) to\r\nautomatically install the Clojure jar in the right place. Leiningen will also\r\nget you a couple more jarfiles, including JLine, which allows you some of the\r\nfunctionality of readline (command-line history, for example).\r\n\r\n### Installing dependencies\r\n\r\nDependencies are installed automatically with lein 2, but if for some reason\r\nyou're on lein 1 and can't upgrade, you'll need to run\r\n\r\n`lein deps`\r\n\r\nwhich will download all dependencies you need to run the Clojure koans.\r\n\r\nI strongly recommend that you upgrade to lein 2 instead!\r\n\r\n### Running the Koans\r\n\r\nIf you're running from the zipfile, simply run\r\n\r\n`script/run` on Mac/\\*nix\r\n\r\n`script\\run` on Windows\r\n\r\nIf you're running from a checkout using lein 2, run the koans via\r\n\r\n`lein koan run`\r\n\r\nIt's an auto-runner, so as you save your files with the correct answers, it will\r\nadvance you to the next koan or file (conveniently, all files are prefixed with\r\nthe sequence that you should follow).\r\n\r\nYou'll see something like this:\r\n\r\n    Now meditate on /home/colin/Projects/clojure-koans/src/koans/01_equalities.clj:3\r\n    ---------------------\r\n    Assertion failed!\r\n    We shall contemplate truth by testing reality, via equality.\r\n    (= __ true)\r\n\r\nThe output is telling you that you have a failing test in the file named\r\n`01_equalities.clj`, on line 3. So you just need to open that file up and make\r\nit pass!  You'll always be filling in the blanks to make tests pass.\r\nSometimes there could be several correct answers (or even an infinite number):\r\nany of them will work in these cases. Some tests will pass even if you replace\r\nthe blanks with whitespace (or nothing) instead of the expected answer. Make sure\r\nyou give one correct expression to replace each blank.\r\n\r\nThe koans differ from normal TDD in that the tests are already written for you,\r\nso you'll have to pay close attention to the failure messages, because up until\r\nthe very end, making a test pass just means that the next failure message comes\r\nup.\r\n\r\nWhile it might be easy (especially at first) to just fill in the blanks making\r\nthings pass, you should work thoughtfully, making sure you understand why the\r\nanswer is what it is.  Enjoy your path to Clojure enlightenment!\r\n\r\n\r\n### Trying more things out\r\n\r\nThere's a REPL (Read-Evaluate-Print Loop) included in the Clojure Koans. Just\r\nrun:\r\n\r\n`script/repl` on Mac/\\*nix\r\n\r\n`script\\repl` on Windows\r\n\r\nIf you're on lein 2, `lein repl` is what you want instead.\r\n\r\nHere are some interesting commands you might try, once you're in a running REPL:\r\n\r\n```clojure\r\n(find-doc \"vec\")\r\n(find-doc #\"vec$\")\r\n(doc vec)\r\n```\r\n\r\nAnd if those still don't make sense:\r\n\r\n```clojure\r\n(doc doc)\r\n(doc find-doc)\r\n```\r\n\r\nwill show you what those commands mean.\r\n\r\nYou can exit the REPL with `CTRL-d` on any OS.\r\n\r\n\r\n### Contributing\r\n\r\nPatches are encouraged!  Make sure the answer sheet still passes\r\n(`lein koan test`), and send a pull request.\r\n\r\nThe file ideaboard.txt has lots of good ideas for new koans to start, or things\r\nto add to existing koans.  So write some fun exercises, add your answers to\r\n`resources/koans.clj`, and we'll get them in there!\r\n\r\nPlease follow the guidelines in\r\nhttp://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html for\r\ncommmit messages, and put your code in a feature branch (not master) before\r\nmaking the pull request. This makes patches easier to review.\r\n\r\nFeel free to contact me (Colin Jones / trptcolin) on Github or elsewhere if you\r\nhave any questions or want more direction before you start pitching in.\r\n\r\n\r\n### Contributors\r\n\r\nhttps://github.com/functional-koans/clojure-koans/contributors\r\n\r\n\r\n### Credits\r\n\r\nThese exercises were started by [Aaron Bedra](http://github.com/abedra) of\r\n[Relevance, Inc.](http://github.com/relevance) in early 2010, as a learning\r\ntool for newcomers to functional programming. Aaron's macro-fu makes these\r\nkoans extremely simple and fun to use, and to improve upon, and without\r\nRelevance's initiative, this project would not exist.\r\n\r\nUsing the [koans](http://en.wikipedia.org/wiki/koan) metaphor as a tool for\r\nlearning a programming language started with the\r\n[Ruby Koans](http://rubykoans.com) by [EdgeCase](http://github.com/edgecase).\r\n\r\n\r\n### License\r\n\r\nThe use and distribution terms for this software are covered by the\r\nEclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\r\nwhich can be found in the file epl-v10.html at the root of this distribution.\r\nBy using this software in any fashion, you are agreeing to be bound by\r\nthe terms of this license.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}